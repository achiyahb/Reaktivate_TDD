{"version":3,"sources":["Shared/config.ts","Shared/ApiGateway.ts","Books/Books.repository.ts","index.tsx"],"names":["API_BASE","ApiGateway","constructor","this","get","async","response","fetch","concat","path","json","post","payload","method","headers","Content-Type","body","JSON","stringify","booksRepository","httpGateway","getBooks","addBook","name","author","_ref","bookAddDto","status","ObservedApp","list","setList","useState","useEffect","books","load","React","createElement","map","book","i","key","onClick","alert","rootElement","document","getElementById","ReactDOM","render"],"mappings":"yIAAO,MAAMA,EACX,qDCCa,MAAMC,EAAWC,cAAAC,KAC9BC,IAAMC,WACJ,MAAMC,QAAiBC,MAAK,GAAAC,OAAIR,GAAQQ,OAAGC,IAE3C,aADqBH,EAASI,SAE/BP,KAEDQ,KAAON,OAAUI,EAAcG,KAC7B,MAAMN,QAAiBC,MAAK,GAAAC,OAAIR,GAAQQ,OAAGC,GAAQ,CACjDI,OAAQ,OACRC,QAAS,CACPC,eAAgB,oBAGlBC,KAAMC,KAAKC,UAAUN,KAGvB,aADqBN,EAASI,UCenBS,MADS,IArBxB,MAGEjB,cAAcC,KAFNiB,iBAAW,EAAAjB,KAMnBkB,SAAWhB,gBACcF,KAAKiB,YAAYhB,IAAY,MAErDD,KAEDmB,QAAUjB,WAAoD,IAA7CkB,KAAEA,EAAIC,OAAEA,GAAcC,EACrC,MAAMC,QAAmBvB,KAAKiB,YAAYT,KAAsB,SAAU,CACxEY,OACAC,WAEF,SAAOE,GAAoC,OAAtBA,EAAWC,UAbhCxB,KAAKiB,YAAc,IAAInB,IC0B3B,MAAM2B,EA7BN,WACE,MAAOC,EAAMC,GAAWC,mBAAiB,IAUzC,OARAC,oBAAU,MACR3B,iBACE,MAAM4B,QAAcd,EAAgBE,WACpCS,EAAQG,GAEVC,IACC,IAGDC,IAAAC,cAAA,WACGP,EAAKQ,IAAI,CAACC,EAAMC,IACfJ,IAAAC,cAAA,OAAKI,IAAKD,GACPD,EAAKd,OAAO,KAAGc,EAAKf,OAGzBY,IAAAC,cAAA,UACEK,QAASA,KACPC,MAAM,SAET,SASDC,EAAcC,SAASC,eAAe,QACxCF,GACFG,IAASC,OAAOZ,IAAAC,cAACR,EAAW,MAAKe","file":"static/js/main.db6554a0.chunk.js","sourcesContent":["export const API_BASE: string =\n  \"https://tdd.demo.reaktivate.com/v1/books/postnikov\";\n","import { API_BASE } from \"./config\";\n\nexport default class ApiGateway {\n  get = async <T>(path: string): Promise<T> => {\n    const response = await fetch(`${API_BASE}${path}`);\n    const dto: T = await response.json();\n    return dto;\n  };\n\n  post = async <T>(path: string, payload: any): Promise<T> => {\n    const response = await fetch(`${API_BASE}${path}`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        // 'Content-Type': 'application/x-www-form-urlencoded',\n      },\n      body: JSON.stringify(payload),\n    });\n    const dto: T = await response.json();\n    return dto;\n  };\n}\n","import ApiGateway from \"../Shared/ApiGateway\";\n\ninterface Book {\n  author: string;\n  name: string;\n}\n\ninterface BookAddResponse {\n  status: string;\n}\n\nclass BooksRepository {\n  private httpGateway: ApiGateway;\n\n  constructor() {\n    this.httpGateway = new ApiGateway();\n  }\n\n  getBooks = async (): Promise<Book[]> => {\n    const booksDto = await this.httpGateway.get<Book[]>(\"/\");\n    return booksDto;\n  };\n\n  addBook = async ({ name, author }: Book): Promise<boolean> => {\n    const bookAddDto = await this.httpGateway.post<BookAddResponse>(\"/books\", {\n      name,\n      author,\n    });\n    return bookAddDto && bookAddDto.status === \"ok\" ? true : false;\n  };\n}\n\nconst booksRepository = new BooksRepository();\nexport default booksRepository;\n","import React, { useState, useEffect } from \"react\";\nimport ReactDOM from \"react-dom\";\n// import { observer } from \"mobx-react\";\n\nimport \"./styles.css\";\nimport booksRepository from \"./Books/Books.repository\";\n\ninterface Book {\n  author: string;\n  name: string;\n}\n\nfunction App(): JSX.Element {\n  const [list, setList] = useState<Book[]>([]);\n\n  useEffect(() => {\n    async function load(): Promise<void> {\n      const books = await booksRepository.getBooks();\n      setList(books);\n    }\n    load();\n  }, []);\n\n  return (\n    <div>\n      {list.map((book, i) => (\n        <div key={i}>\n          {book.author}: {book.name}\n        </div>\n      ))}\n      <button\n        onClick={() => {\n          alert(\"TBD\");\n        }}\n      >\n        Add\n      </button>\n    </div>\n  );\n}\n\nconst ObservedApp = App;\n\nconst rootElement = document.getElementById(\"root\");\nif (rootElement) {\n  ReactDOM.render(<ObservedApp />, rootElement);\n}\n"],"sourceRoot":""}